// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(breez_liquid_sdkFFI)
import breez_liquid_sdkFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_breez_liquid_sdk_bindings_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_breez_liquid_sdk_bindings_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol BindingLiquidSdkProtocol : AnyObject {
    
    func addEventListener(listener: EventListener) throws  -> String
    
    func backup(req: BackupRequest) throws 
    
    func disconnect() throws 
    
    func getInfo() throws  -> GetInfoResponse
    
    func listPayments() throws  -> [Payment]
    
    func prepareReceivePayment(req: PrepareReceiveRequest) throws  -> PrepareReceiveResponse
    
    func prepareSendPayment(req: PrepareSendRequest) throws  -> PrepareSendResponse
    
    func receivePayment(req: PrepareReceiveResponse) throws  -> ReceivePaymentResponse
    
    func removeEventListener(id: String) throws 
    
    func restore(req: RestoreRequest) throws 
    
    func sendPayment(req: PrepareSendResponse) throws  -> SendPaymentResponse
    
    func sync() throws 
    
}

open class BindingLiquidSdk:
    BindingLiquidSdkProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_breez_liquid_sdk_bindings_fn_clone_bindingliquidsdk(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_breez_liquid_sdk_bindings_fn_free_bindingliquidsdk(pointer, $0) }
    }

    

    
open func addEventListener(listener: EventListener)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeLiquidSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_add_event_listener(self.uniffiClonePointer(),
        FfiConverterCallbackInterfaceEventListener.lower(listener),$0
    )
})
}
    
open func backup(req: BackupRequest)throws  {try rustCallWithError(FfiConverterTypeLiquidSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_backup(self.uniffiClonePointer(),
        FfiConverterTypeBackupRequest.lower(req),$0
    )
}
}
    
open func disconnect()throws  {try rustCallWithError(FfiConverterTypeLiquidSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_disconnect(self.uniffiClonePointer(),$0
    )
}
}
    
open func getInfo()throws  -> GetInfoResponse {
    return try  FfiConverterTypeGetInfoResponse.lift(try rustCallWithError(FfiConverterTypeLiquidSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_get_info(self.uniffiClonePointer(),$0
    )
})
}
    
open func listPayments()throws  -> [Payment] {
    return try  FfiConverterSequenceTypePayment.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_list_payments(self.uniffiClonePointer(),$0
    )
})
}
    
open func prepareReceivePayment(req: PrepareReceiveRequest)throws  -> PrepareReceiveResponse {
    return try  FfiConverterTypePrepareReceiveResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_prepare_receive_payment(self.uniffiClonePointer(),
        FfiConverterTypePrepareReceiveRequest.lower(req),$0
    )
})
}
    
open func prepareSendPayment(req: PrepareSendRequest)throws  -> PrepareSendResponse {
    return try  FfiConverterTypePrepareSendResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_prepare_send_payment(self.uniffiClonePointer(),
        FfiConverterTypePrepareSendRequest.lower(req),$0
    )
})
}
    
open func receivePayment(req: PrepareReceiveResponse)throws  -> ReceivePaymentResponse {
    return try  FfiConverterTypeReceivePaymentResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_receive_payment(self.uniffiClonePointer(),
        FfiConverterTypePrepareReceiveResponse.lower(req),$0
    )
})
}
    
open func removeEventListener(id: String)throws  {try rustCallWithError(FfiConverterTypeLiquidSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_remove_event_listener(self.uniffiClonePointer(),
        FfiConverterString.lower(id),$0
    )
}
}
    
open func restore(req: RestoreRequest)throws  {try rustCallWithError(FfiConverterTypeLiquidSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_restore(self.uniffiClonePointer(),
        FfiConverterTypeRestoreRequest.lower(req),$0
    )
}
}
    
open func sendPayment(req: PrepareSendResponse)throws  -> SendPaymentResponse {
    return try  FfiConverterTypeSendPaymentResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_send_payment(self.uniffiClonePointer(),
        FfiConverterTypePrepareSendResponse.lower(req),$0
    )
})
}
    
open func sync()throws  {try rustCallWithError(FfiConverterTypeLiquidSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingliquidsdk_sync(self.uniffiClonePointer(),$0
    )
}
}
    

}

public struct FfiConverterTypeBindingLiquidSdk: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BindingLiquidSdk

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BindingLiquidSdk {
        return BindingLiquidSdk(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BindingLiquidSdk) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BindingLiquidSdk {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BindingLiquidSdk, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeBindingLiquidSdk_lift(_ pointer: UnsafeMutableRawPointer) throws -> BindingLiquidSdk {
    return try FfiConverterTypeBindingLiquidSdk.lift(pointer)
}

public func FfiConverterTypeBindingLiquidSdk_lower(_ value: BindingLiquidSdk) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBindingLiquidSdk.lower(value)
}


public struct BackupRequest {
    public var backupPath: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(backupPath: String? = nil) {
        self.backupPath = backupPath
    }
}



extension BackupRequest: Equatable, Hashable {
    public static func ==(lhs: BackupRequest, rhs: BackupRequest) -> Bool {
        if lhs.backupPath != rhs.backupPath {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(backupPath)
    }
}


public struct FfiConverterTypeBackupRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BackupRequest {
        return
            try BackupRequest(
                backupPath: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: BackupRequest, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.backupPath, into: &buf)
    }
}


public func FfiConverterTypeBackupRequest_lift(_ buf: RustBuffer) throws -> BackupRequest {
    return try FfiConverterTypeBackupRequest.lift(buf)
}

public func FfiConverterTypeBackupRequest_lower(_ value: BackupRequest) -> RustBuffer {
    return FfiConverterTypeBackupRequest.lower(value)
}


public struct Config {
    public var boltzUrl: String
    public var electrumUrl: String
    public var workingDir: String
    public var network: Network
    public var paymentTimeoutSec: UInt64
    public var zeroConfMinFeeRate: Float
    public var zeroConfMaxAmountSat: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(boltzUrl: String, electrumUrl: String, workingDir: String, network: Network, paymentTimeoutSec: UInt64, zeroConfMinFeeRate: Float, zeroConfMaxAmountSat: UInt64?) {
        self.boltzUrl = boltzUrl
        self.electrumUrl = electrumUrl
        self.workingDir = workingDir
        self.network = network
        self.paymentTimeoutSec = paymentTimeoutSec
        self.zeroConfMinFeeRate = zeroConfMinFeeRate
        self.zeroConfMaxAmountSat = zeroConfMaxAmountSat
    }
}



extension Config: Equatable, Hashable {
    public static func ==(lhs: Config, rhs: Config) -> Bool {
        if lhs.boltzUrl != rhs.boltzUrl {
            return false
        }
        if lhs.electrumUrl != rhs.electrumUrl {
            return false
        }
        if lhs.workingDir != rhs.workingDir {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.paymentTimeoutSec != rhs.paymentTimeoutSec {
            return false
        }
        if lhs.zeroConfMinFeeRate != rhs.zeroConfMinFeeRate {
            return false
        }
        if lhs.zeroConfMaxAmountSat != rhs.zeroConfMaxAmountSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(boltzUrl)
        hasher.combine(electrumUrl)
        hasher.combine(workingDir)
        hasher.combine(network)
        hasher.combine(paymentTimeoutSec)
        hasher.combine(zeroConfMinFeeRate)
        hasher.combine(zeroConfMaxAmountSat)
    }
}


public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                boltzUrl: FfiConverterString.read(from: &buf), 
                electrumUrl: FfiConverterString.read(from: &buf), 
                workingDir: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeNetwork.read(from: &buf), 
                paymentTimeoutSec: FfiConverterUInt64.read(from: &buf), 
                zeroConfMinFeeRate: FfiConverterFloat.read(from: &buf), 
                zeroConfMaxAmountSat: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterString.write(value.boltzUrl, into: &buf)
        FfiConverterString.write(value.electrumUrl, into: &buf)
        FfiConverterString.write(value.workingDir, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
        FfiConverterUInt64.write(value.paymentTimeoutSec, into: &buf)
        FfiConverterFloat.write(value.zeroConfMinFeeRate, into: &buf)
        FfiConverterOptionUInt64.write(value.zeroConfMaxAmountSat, into: &buf)
    }
}


public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}


public struct ConnectRequest {
    public var config: Config
    public var mnemonic: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(config: Config, mnemonic: String) {
        self.config = config
        self.mnemonic = mnemonic
    }
}



extension ConnectRequest: Equatable, Hashable {
    public static func ==(lhs: ConnectRequest, rhs: ConnectRequest) -> Bool {
        if lhs.config != rhs.config {
            return false
        }
        if lhs.mnemonic != rhs.mnemonic {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(config)
        hasher.combine(mnemonic)
    }
}


public struct FfiConverterTypeConnectRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectRequest {
        return
            try ConnectRequest(
                config: FfiConverterTypeConfig.read(from: &buf), 
                mnemonic: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectRequest, into buf: inout [UInt8]) {
        FfiConverterTypeConfig.write(value.config, into: &buf)
        FfiConverterString.write(value.mnemonic, into: &buf)
    }
}


public func FfiConverterTypeConnectRequest_lift(_ buf: RustBuffer) throws -> ConnectRequest {
    return try FfiConverterTypeConnectRequest.lift(buf)
}

public func FfiConverterTypeConnectRequest_lower(_ value: ConnectRequest) -> RustBuffer {
    return FfiConverterTypeConnectRequest.lower(value)
}


public struct GetInfoResponse {
    public var balanceSat: UInt64
    public var pendingSendSat: UInt64
    public var pendingReceiveSat: UInt64
    public var pubkey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(balanceSat: UInt64, pendingSendSat: UInt64, pendingReceiveSat: UInt64, pubkey: String) {
        self.balanceSat = balanceSat
        self.pendingSendSat = pendingSendSat
        self.pendingReceiveSat = pendingReceiveSat
        self.pubkey = pubkey
    }
}



extension GetInfoResponse: Equatable, Hashable {
    public static func ==(lhs: GetInfoResponse, rhs: GetInfoResponse) -> Bool {
        if lhs.balanceSat != rhs.balanceSat {
            return false
        }
        if lhs.pendingSendSat != rhs.pendingSendSat {
            return false
        }
        if lhs.pendingReceiveSat != rhs.pendingReceiveSat {
            return false
        }
        if lhs.pubkey != rhs.pubkey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(balanceSat)
        hasher.combine(pendingSendSat)
        hasher.combine(pendingReceiveSat)
        hasher.combine(pubkey)
    }
}


public struct FfiConverterTypeGetInfoResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetInfoResponse {
        return
            try GetInfoResponse(
                balanceSat: FfiConverterUInt64.read(from: &buf), 
                pendingSendSat: FfiConverterUInt64.read(from: &buf), 
                pendingReceiveSat: FfiConverterUInt64.read(from: &buf), 
                pubkey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: GetInfoResponse, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.balanceSat, into: &buf)
        FfiConverterUInt64.write(value.pendingSendSat, into: &buf)
        FfiConverterUInt64.write(value.pendingReceiveSat, into: &buf)
        FfiConverterString.write(value.pubkey, into: &buf)
    }
}


public func FfiConverterTypeGetInfoResponse_lift(_ buf: RustBuffer) throws -> GetInfoResponse {
    return try FfiConverterTypeGetInfoResponse.lift(buf)
}

public func FfiConverterTypeGetInfoResponse_lower(_ value: GetInfoResponse) -> RustBuffer {
    return FfiConverterTypeGetInfoResponse.lower(value)
}


public struct LnInvoice {
    public var bolt11: String
    public var network: Network
    public var payeePubkey: String
    public var paymentHash: String
    public var description: String?
    public var descriptionHash: String?
    public var amountMsat: UInt64?
    public var timestamp: UInt64
    public var expiry: UInt64
    public var routingHints: [RouteHint]
    public var paymentSecret: [UInt8]
    public var minFinalCltvExpiryDelta: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bolt11: String, network: Network, payeePubkey: String, paymentHash: String, description: String?, descriptionHash: String?, amountMsat: UInt64?, timestamp: UInt64, expiry: UInt64, routingHints: [RouteHint], paymentSecret: [UInt8], minFinalCltvExpiryDelta: UInt64) {
        self.bolt11 = bolt11
        self.network = network
        self.payeePubkey = payeePubkey
        self.paymentHash = paymentHash
        self.description = description
        self.descriptionHash = descriptionHash
        self.amountMsat = amountMsat
        self.timestamp = timestamp
        self.expiry = expiry
        self.routingHints = routingHints
        self.paymentSecret = paymentSecret
        self.minFinalCltvExpiryDelta = minFinalCltvExpiryDelta
    }
}



extension LnInvoice: Equatable, Hashable {
    public static func ==(lhs: LnInvoice, rhs: LnInvoice) -> Bool {
        if lhs.bolt11 != rhs.bolt11 {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.payeePubkey != rhs.payeePubkey {
            return false
        }
        if lhs.paymentHash != rhs.paymentHash {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.descriptionHash != rhs.descriptionHash {
            return false
        }
        if lhs.amountMsat != rhs.amountMsat {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.expiry != rhs.expiry {
            return false
        }
        if lhs.routingHints != rhs.routingHints {
            return false
        }
        if lhs.paymentSecret != rhs.paymentSecret {
            return false
        }
        if lhs.minFinalCltvExpiryDelta != rhs.minFinalCltvExpiryDelta {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bolt11)
        hasher.combine(network)
        hasher.combine(payeePubkey)
        hasher.combine(paymentHash)
        hasher.combine(description)
        hasher.combine(descriptionHash)
        hasher.combine(amountMsat)
        hasher.combine(timestamp)
        hasher.combine(expiry)
        hasher.combine(routingHints)
        hasher.combine(paymentSecret)
        hasher.combine(minFinalCltvExpiryDelta)
    }
}


public struct FfiConverterTypeLNInvoice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnInvoice {
        return
            try LnInvoice(
                bolt11: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeNetwork.read(from: &buf), 
                payeePubkey: FfiConverterString.read(from: &buf), 
                paymentHash: FfiConverterString.read(from: &buf), 
                description: FfiConverterOptionString.read(from: &buf), 
                descriptionHash: FfiConverterOptionString.read(from: &buf), 
                amountMsat: FfiConverterOptionUInt64.read(from: &buf), 
                timestamp: FfiConverterUInt64.read(from: &buf), 
                expiry: FfiConverterUInt64.read(from: &buf), 
                routingHints: FfiConverterSequenceTypeRouteHint.read(from: &buf), 
                paymentSecret: FfiConverterSequenceUInt8.read(from: &buf), 
                minFinalCltvExpiryDelta: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: LnInvoice, into buf: inout [UInt8]) {
        FfiConverterString.write(value.bolt11, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
        FfiConverterString.write(value.payeePubkey, into: &buf)
        FfiConverterString.write(value.paymentHash, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterOptionString.write(value.descriptionHash, into: &buf)
        FfiConverterOptionUInt64.write(value.amountMsat, into: &buf)
        FfiConverterUInt64.write(value.timestamp, into: &buf)
        FfiConverterUInt64.write(value.expiry, into: &buf)
        FfiConverterSequenceTypeRouteHint.write(value.routingHints, into: &buf)
        FfiConverterSequenceUInt8.write(value.paymentSecret, into: &buf)
        FfiConverterUInt64.write(value.minFinalCltvExpiryDelta, into: &buf)
    }
}


public func FfiConverterTypeLNInvoice_lift(_ buf: RustBuffer) throws -> LnInvoice {
    return try FfiConverterTypeLNInvoice.lift(buf)
}

public func FfiConverterTypeLNInvoice_lower(_ value: LnInvoice) -> RustBuffer {
    return FfiConverterTypeLNInvoice.lower(value)
}


public struct LogEntry {
    public var line: String
    public var level: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(line: String, level: String) {
        self.line = line
        self.level = level
    }
}



extension LogEntry: Equatable, Hashable {
    public static func ==(lhs: LogEntry, rhs: LogEntry) -> Bool {
        if lhs.line != rhs.line {
            return false
        }
        if lhs.level != rhs.level {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(line)
        hasher.combine(level)
    }
}


public struct FfiConverterTypeLogEntry: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogEntry {
        return
            try LogEntry(
                line: FfiConverterString.read(from: &buf), 
                level: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LogEntry, into buf: inout [UInt8]) {
        FfiConverterString.write(value.line, into: &buf)
        FfiConverterString.write(value.level, into: &buf)
    }
}


public func FfiConverterTypeLogEntry_lift(_ buf: RustBuffer) throws -> LogEntry {
    return try FfiConverterTypeLogEntry.lift(buf)
}

public func FfiConverterTypeLogEntry_lower(_ value: LogEntry) -> RustBuffer {
    return FfiConverterTypeLogEntry.lower(value)
}


public struct Payment {
    public var txId: String?
    public var swapId: String?
    public var timestamp: UInt32
    public var amountSat: UInt64
    public var feesSat: UInt64
    public var preimage: String?
    public var refundTxId: String?
    public var refundTxAmountSat: UInt64?
    public var paymentType: PaymentType
    public var status: PaymentState

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(txId: String? = nil, swapId: String? = nil, timestamp: UInt32, amountSat: UInt64, feesSat: UInt64, preimage: String? = nil, refundTxId: String? = nil, refundTxAmountSat: UInt64? = nil, paymentType: PaymentType, status: PaymentState) {
        self.txId = txId
        self.swapId = swapId
        self.timestamp = timestamp
        self.amountSat = amountSat
        self.feesSat = feesSat
        self.preimage = preimage
        self.refundTxId = refundTxId
        self.refundTxAmountSat = refundTxAmountSat
        self.paymentType = paymentType
        self.status = status
    }
}



extension Payment: Equatable, Hashable {
    public static func ==(lhs: Payment, rhs: Payment) -> Bool {
        if lhs.txId != rhs.txId {
            return false
        }
        if lhs.swapId != rhs.swapId {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.amountSat != rhs.amountSat {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        if lhs.preimage != rhs.preimage {
            return false
        }
        if lhs.refundTxId != rhs.refundTxId {
            return false
        }
        if lhs.refundTxAmountSat != rhs.refundTxAmountSat {
            return false
        }
        if lhs.paymentType != rhs.paymentType {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(txId)
        hasher.combine(swapId)
        hasher.combine(timestamp)
        hasher.combine(amountSat)
        hasher.combine(feesSat)
        hasher.combine(preimage)
        hasher.combine(refundTxId)
        hasher.combine(refundTxAmountSat)
        hasher.combine(paymentType)
        hasher.combine(status)
    }
}


public struct FfiConverterTypePayment: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Payment {
        return
            try Payment(
                txId: FfiConverterOptionString.read(from: &buf), 
                swapId: FfiConverterOptionString.read(from: &buf), 
                timestamp: FfiConverterUInt32.read(from: &buf), 
                amountSat: FfiConverterUInt64.read(from: &buf), 
                feesSat: FfiConverterUInt64.read(from: &buf), 
                preimage: FfiConverterOptionString.read(from: &buf), 
                refundTxId: FfiConverterOptionString.read(from: &buf), 
                refundTxAmountSat: FfiConverterOptionUInt64.read(from: &buf), 
                paymentType: FfiConverterTypePaymentType.read(from: &buf), 
                status: FfiConverterTypePaymentState.read(from: &buf)
        )
    }

    public static func write(_ value: Payment, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.txId, into: &buf)
        FfiConverterOptionString.write(value.swapId, into: &buf)
        FfiConverterUInt32.write(value.timestamp, into: &buf)
        FfiConverterUInt64.write(value.amountSat, into: &buf)
        FfiConverterUInt64.write(value.feesSat, into: &buf)
        FfiConverterOptionString.write(value.preimage, into: &buf)
        FfiConverterOptionString.write(value.refundTxId, into: &buf)
        FfiConverterOptionUInt64.write(value.refundTxAmountSat, into: &buf)
        FfiConverterTypePaymentType.write(value.paymentType, into: &buf)
        FfiConverterTypePaymentState.write(value.status, into: &buf)
    }
}


public func FfiConverterTypePayment_lift(_ buf: RustBuffer) throws -> Payment {
    return try FfiConverterTypePayment.lift(buf)
}

public func FfiConverterTypePayment_lower(_ value: Payment) -> RustBuffer {
    return FfiConverterTypePayment.lower(value)
}


public struct PrepareReceiveRequest {
    public var payerAmountSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(payerAmountSat: UInt64) {
        self.payerAmountSat = payerAmountSat
    }
}



extension PrepareReceiveRequest: Equatable, Hashable {
    public static func ==(lhs: PrepareReceiveRequest, rhs: PrepareReceiveRequest) -> Bool {
        if lhs.payerAmountSat != rhs.payerAmountSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(payerAmountSat)
    }
}


public struct FfiConverterTypePrepareReceiveRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareReceiveRequest {
        return
            try PrepareReceiveRequest(
                payerAmountSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareReceiveRequest, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.payerAmountSat, into: &buf)
    }
}


public func FfiConverterTypePrepareReceiveRequest_lift(_ buf: RustBuffer) throws -> PrepareReceiveRequest {
    return try FfiConverterTypePrepareReceiveRequest.lift(buf)
}

public func FfiConverterTypePrepareReceiveRequest_lower(_ value: PrepareReceiveRequest) -> RustBuffer {
    return FfiConverterTypePrepareReceiveRequest.lower(value)
}


public struct PrepareReceiveResponse {
    public var payerAmountSat: UInt64
    public var feesSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(payerAmountSat: UInt64, feesSat: UInt64) {
        self.payerAmountSat = payerAmountSat
        self.feesSat = feesSat
    }
}



extension PrepareReceiveResponse: Equatable, Hashable {
    public static func ==(lhs: PrepareReceiveResponse, rhs: PrepareReceiveResponse) -> Bool {
        if lhs.payerAmountSat != rhs.payerAmountSat {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(payerAmountSat)
        hasher.combine(feesSat)
    }
}


public struct FfiConverterTypePrepareReceiveResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareReceiveResponse {
        return
            try PrepareReceiveResponse(
                payerAmountSat: FfiConverterUInt64.read(from: &buf), 
                feesSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareReceiveResponse, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.payerAmountSat, into: &buf)
        FfiConverterUInt64.write(value.feesSat, into: &buf)
    }
}


public func FfiConverterTypePrepareReceiveResponse_lift(_ buf: RustBuffer) throws -> PrepareReceiveResponse {
    return try FfiConverterTypePrepareReceiveResponse.lift(buf)
}

public func FfiConverterTypePrepareReceiveResponse_lower(_ value: PrepareReceiveResponse) -> RustBuffer {
    return FfiConverterTypePrepareReceiveResponse.lower(value)
}


public struct PrepareSendRequest {
    public var invoice: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(invoice: String) {
        self.invoice = invoice
    }
}



extension PrepareSendRequest: Equatable, Hashable {
    public static func ==(lhs: PrepareSendRequest, rhs: PrepareSendRequest) -> Bool {
        if lhs.invoice != rhs.invoice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(invoice)
    }
}


public struct FfiConverterTypePrepareSendRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareSendRequest {
        return
            try PrepareSendRequest(
                invoice: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareSendRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.invoice, into: &buf)
    }
}


public func FfiConverterTypePrepareSendRequest_lift(_ buf: RustBuffer) throws -> PrepareSendRequest {
    return try FfiConverterTypePrepareSendRequest.lift(buf)
}

public func FfiConverterTypePrepareSendRequest_lower(_ value: PrepareSendRequest) -> RustBuffer {
    return FfiConverterTypePrepareSendRequest.lower(value)
}


public struct PrepareSendResponse {
    public var invoice: String
    public var feesSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(invoice: String, feesSat: UInt64) {
        self.invoice = invoice
        self.feesSat = feesSat
    }
}



extension PrepareSendResponse: Equatable, Hashable {
    public static func ==(lhs: PrepareSendResponse, rhs: PrepareSendResponse) -> Bool {
        if lhs.invoice != rhs.invoice {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(invoice)
        hasher.combine(feesSat)
    }
}


public struct FfiConverterTypePrepareSendResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareSendResponse {
        return
            try PrepareSendResponse(
                invoice: FfiConverterString.read(from: &buf), 
                feesSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareSendResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.invoice, into: &buf)
        FfiConverterUInt64.write(value.feesSat, into: &buf)
    }
}


public func FfiConverterTypePrepareSendResponse_lift(_ buf: RustBuffer) throws -> PrepareSendResponse {
    return try FfiConverterTypePrepareSendResponse.lift(buf)
}

public func FfiConverterTypePrepareSendResponse_lower(_ value: PrepareSendResponse) -> RustBuffer {
    return FfiConverterTypePrepareSendResponse.lower(value)
}


public struct ReceivePaymentResponse {
    public var id: String
    public var invoice: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, invoice: String) {
        self.id = id
        self.invoice = invoice
    }
}



extension ReceivePaymentResponse: Equatable, Hashable {
    public static func ==(lhs: ReceivePaymentResponse, rhs: ReceivePaymentResponse) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.invoice != rhs.invoice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(invoice)
    }
}


public struct FfiConverterTypeReceivePaymentResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReceivePaymentResponse {
        return
            try ReceivePaymentResponse(
                id: FfiConverterString.read(from: &buf), 
                invoice: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ReceivePaymentResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.invoice, into: &buf)
    }
}


public func FfiConverterTypeReceivePaymentResponse_lift(_ buf: RustBuffer) throws -> ReceivePaymentResponse {
    return try FfiConverterTypeReceivePaymentResponse.lift(buf)
}

public func FfiConverterTypeReceivePaymentResponse_lower(_ value: ReceivePaymentResponse) -> RustBuffer {
    return FfiConverterTypeReceivePaymentResponse.lower(value)
}


public struct RestoreRequest {
    public var backupPath: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(backupPath: String? = nil) {
        self.backupPath = backupPath
    }
}



extension RestoreRequest: Equatable, Hashable {
    public static func ==(lhs: RestoreRequest, rhs: RestoreRequest) -> Bool {
        if lhs.backupPath != rhs.backupPath {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(backupPath)
    }
}


public struct FfiConverterTypeRestoreRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RestoreRequest {
        return
            try RestoreRequest(
                backupPath: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: RestoreRequest, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.backupPath, into: &buf)
    }
}


public func FfiConverterTypeRestoreRequest_lift(_ buf: RustBuffer) throws -> RestoreRequest {
    return try FfiConverterTypeRestoreRequest.lift(buf)
}

public func FfiConverterTypeRestoreRequest_lower(_ value: RestoreRequest) -> RustBuffer {
    return FfiConverterTypeRestoreRequest.lower(value)
}


public struct RouteHint {
    public var hops: [RouteHintHop]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hops: [RouteHintHop]) {
        self.hops = hops
    }
}



extension RouteHint: Equatable, Hashable {
    public static func ==(lhs: RouteHint, rhs: RouteHint) -> Bool {
        if lhs.hops != rhs.hops {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hops)
    }
}


public struct FfiConverterTypeRouteHint: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteHint {
        return
            try RouteHint(
                hops: FfiConverterSequenceTypeRouteHintHop.read(from: &buf)
        )
    }

    public static func write(_ value: RouteHint, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeRouteHintHop.write(value.hops, into: &buf)
    }
}


public func FfiConverterTypeRouteHint_lift(_ buf: RustBuffer) throws -> RouteHint {
    return try FfiConverterTypeRouteHint.lift(buf)
}

public func FfiConverterTypeRouteHint_lower(_ value: RouteHint) -> RustBuffer {
    return FfiConverterTypeRouteHint.lower(value)
}


public struct RouteHintHop {
    public var srcNodeId: String
    public var shortChannelId: UInt64
    public var feesBaseMsat: UInt32
    public var feesProportionalMillionths: UInt32
    public var cltvExpiryDelta: UInt64
    public var htlcMinimumMsat: UInt64?
    public var htlcMaximumMsat: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(srcNodeId: String, shortChannelId: UInt64, feesBaseMsat: UInt32, feesProportionalMillionths: UInt32, cltvExpiryDelta: UInt64, htlcMinimumMsat: UInt64?, htlcMaximumMsat: UInt64?) {
        self.srcNodeId = srcNodeId
        self.shortChannelId = shortChannelId
        self.feesBaseMsat = feesBaseMsat
        self.feesProportionalMillionths = feesProportionalMillionths
        self.cltvExpiryDelta = cltvExpiryDelta
        self.htlcMinimumMsat = htlcMinimumMsat
        self.htlcMaximumMsat = htlcMaximumMsat
    }
}



extension RouteHintHop: Equatable, Hashable {
    public static func ==(lhs: RouteHintHop, rhs: RouteHintHop) -> Bool {
        if lhs.srcNodeId != rhs.srcNodeId {
            return false
        }
        if lhs.shortChannelId != rhs.shortChannelId {
            return false
        }
        if lhs.feesBaseMsat != rhs.feesBaseMsat {
            return false
        }
        if lhs.feesProportionalMillionths != rhs.feesProportionalMillionths {
            return false
        }
        if lhs.cltvExpiryDelta != rhs.cltvExpiryDelta {
            return false
        }
        if lhs.htlcMinimumMsat != rhs.htlcMinimumMsat {
            return false
        }
        if lhs.htlcMaximumMsat != rhs.htlcMaximumMsat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(srcNodeId)
        hasher.combine(shortChannelId)
        hasher.combine(feesBaseMsat)
        hasher.combine(feesProportionalMillionths)
        hasher.combine(cltvExpiryDelta)
        hasher.combine(htlcMinimumMsat)
        hasher.combine(htlcMaximumMsat)
    }
}


public struct FfiConverterTypeRouteHintHop: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteHintHop {
        return
            try RouteHintHop(
                srcNodeId: FfiConverterString.read(from: &buf), 
                shortChannelId: FfiConverterUInt64.read(from: &buf), 
                feesBaseMsat: FfiConverterUInt32.read(from: &buf), 
                feesProportionalMillionths: FfiConverterUInt32.read(from: &buf), 
                cltvExpiryDelta: FfiConverterUInt64.read(from: &buf), 
                htlcMinimumMsat: FfiConverterOptionUInt64.read(from: &buf), 
                htlcMaximumMsat: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: RouteHintHop, into buf: inout [UInt8]) {
        FfiConverterString.write(value.srcNodeId, into: &buf)
        FfiConverterUInt64.write(value.shortChannelId, into: &buf)
        FfiConverterUInt32.write(value.feesBaseMsat, into: &buf)
        FfiConverterUInt32.write(value.feesProportionalMillionths, into: &buf)
        FfiConverterUInt64.write(value.cltvExpiryDelta, into: &buf)
        FfiConverterOptionUInt64.write(value.htlcMinimumMsat, into: &buf)
        FfiConverterOptionUInt64.write(value.htlcMaximumMsat, into: &buf)
    }
}


public func FfiConverterTypeRouteHintHop_lift(_ buf: RustBuffer) throws -> RouteHintHop {
    return try FfiConverterTypeRouteHintHop.lift(buf)
}

public func FfiConverterTypeRouteHintHop_lower(_ value: RouteHintHop) -> RustBuffer {
    return FfiConverterTypeRouteHintHop.lower(value)
}


public struct SendPaymentResponse {
    public var payment: Payment

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(payment: Payment) {
        self.payment = payment
    }
}



extension SendPaymentResponse: Equatable, Hashable {
    public static func ==(lhs: SendPaymentResponse, rhs: SendPaymentResponse) -> Bool {
        if lhs.payment != rhs.payment {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(payment)
    }
}


public struct FfiConverterTypeSendPaymentResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendPaymentResponse {
        return
            try SendPaymentResponse(
                payment: FfiConverterTypePayment.read(from: &buf)
        )
    }

    public static func write(_ value: SendPaymentResponse, into buf: inout [UInt8]) {
        FfiConverterTypePayment.write(value.payment, into: &buf)
    }
}


public func FfiConverterTypeSendPaymentResponse_lift(_ buf: RustBuffer) throws -> SendPaymentResponse {
    return try FfiConverterTypeSendPaymentResponse.lift(buf)
}

public func FfiConverterTypeSendPaymentResponse_lower(_ value: SendPaymentResponse) -> RustBuffer {
    return FfiConverterTypeSendPaymentResponse.lower(value)
}


public enum LiquidSdkError {

    
    
    case AlreadyStarted(message: String)
    
    case Generic(message: String)
    
    case NotStarted(message: String)
    
}


public struct FfiConverterTypeLiquidSdkError: FfiConverterRustBuffer {
    typealias SwiftType = LiquidSdkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiquidSdkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .AlreadyStarted(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .NotStarted(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LiquidSdkError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .AlreadyStarted(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .NotStarted(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))

        
        }
    }
}


extension LiquidSdkError: Equatable, Hashable {}

extension LiquidSdkError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LiquidSdkEvent {
    
    case paymentFailed(details: Payment
    )
    case paymentPending(details: Payment
    )
    case paymentRefunded(details: Payment
    )
    case paymentRefundPending(details: Payment
    )
    case paymentSucceeded(details: Payment
    )
    case paymentWaitingConfirmation(details: Payment
    )
    case synced
}


public struct FfiConverterTypeLiquidSdkEvent: FfiConverterRustBuffer {
    typealias SwiftType = LiquidSdkEvent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiquidSdkEvent {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .paymentFailed(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 2: return .paymentPending(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 3: return .paymentRefunded(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 4: return .paymentRefundPending(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 5: return .paymentSucceeded(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 6: return .paymentWaitingConfirmation(details: try FfiConverterTypePayment.read(from: &buf)
        )
        
        case 7: return .synced
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LiquidSdkEvent, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .paymentFailed(details):
            writeInt(&buf, Int32(1))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentPending(details):
            writeInt(&buf, Int32(2))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentRefunded(details):
            writeInt(&buf, Int32(3))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentRefundPending(details):
            writeInt(&buf, Int32(4))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentSucceeded(details):
            writeInt(&buf, Int32(5))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case let .paymentWaitingConfirmation(details):
            writeInt(&buf, Int32(6))
            FfiConverterTypePayment.write(details, into: &buf)
            
        
        case .synced:
            writeInt(&buf, Int32(7))
        
        }
    }
}


public func FfiConverterTypeLiquidSdkEvent_lift(_ buf: RustBuffer) throws -> LiquidSdkEvent {
    return try FfiConverterTypeLiquidSdkEvent.lift(buf)
}

public func FfiConverterTypeLiquidSdkEvent_lower(_ value: LiquidSdkEvent) -> RustBuffer {
    return FfiConverterTypeLiquidSdkEvent.lower(value)
}



extension LiquidSdkEvent: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Network {
    
    case mainnet
    case testnet
}


public struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .mainnet
        
        case 2: return .testnet
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        switch value {
        
        
        case .mainnet:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeNetwork_lift(_ buf: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(buf)
}

public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}



extension Network: Equatable, Hashable {}




public enum PaymentError {

    
    
    case AlreadyClaimed(message: String)
    
    case AlreadyPaid(message: String)
    
    case PaymentInProgress(message: String)
    
    case AmountOutOfRange(message: String)
    
    case Generic(message: String)
    
    case InvalidOrExpiredFees(message: String)
    
    case InsufficientFunds(message: String)
    
    case InvalidInvoice(message: String)
    
    case InvalidPreimage(message: String)
    
    case LwkError(message: String)
    
    case PairsNotFound(message: String)
    
    case PaymentTimeout(message: String)
    
    case PersistError(message: String)
    
    case ReceiveError(message: String)
    
    case Refunded(message: String)
    
    case SelfTransferNotSupported(message: String)
    
    case SendError(message: String)
    
    case SignerError(message: String)
    
}


public struct FfiConverterTypePaymentError: FfiConverterRustBuffer {
    typealias SwiftType = PaymentError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .AlreadyClaimed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .AlreadyPaid(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .PaymentInProgress(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .AmountOutOfRange(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .InvalidOrExpiredFees(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .InsufficientFunds(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .InvalidInvoice(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .InvalidPreimage(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .LwkError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .PairsNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .PaymentTimeout(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .PersistError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .ReceiveError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .Refunded(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .SelfTransferNotSupported(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .SendError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .SignerError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .AlreadyClaimed(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .AlreadyPaid(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .PaymentInProgress(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .AmountOutOfRange(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .InvalidOrExpiredFees(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .InsufficientFunds(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .InvalidInvoice(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .InvalidPreimage(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .LwkError(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .PairsNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .PaymentTimeout(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .PersistError(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .ReceiveError(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))
        case .Refunded(_ /* message is ignored*/):
            writeInt(&buf, Int32(15))
        case .SelfTransferNotSupported(_ /* message is ignored*/):
            writeInt(&buf, Int32(16))
        case .SendError(_ /* message is ignored*/):
            writeInt(&buf, Int32(17))
        case .SignerError(_ /* message is ignored*/):
            writeInt(&buf, Int32(18))

        
        }
    }
}


extension PaymentError: Equatable, Hashable {}

extension PaymentError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentState {
    
    case created
    case pending
    case complete
    case failed
    case timedOut
}


public struct FfiConverterTypePaymentState: FfiConverterRustBuffer {
    typealias SwiftType = PaymentState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .created
        
        case 2: return .pending
        
        case 3: return .complete
        
        case 4: return .failed
        
        case 5: return .timedOut
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .created:
            writeInt(&buf, Int32(1))
        
        
        case .pending:
            writeInt(&buf, Int32(2))
        
        
        case .complete:
            writeInt(&buf, Int32(3))
        
        
        case .failed:
            writeInt(&buf, Int32(4))
        
        
        case .timedOut:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypePaymentState_lift(_ buf: RustBuffer) throws -> PaymentState {
    return try FfiConverterTypePaymentState.lift(buf)
}

public func FfiConverterTypePaymentState_lower(_ value: PaymentState) -> RustBuffer {
    return FfiConverterTypePaymentState.lower(value)
}



extension PaymentState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentType {
    
    case receive
    case send
}


public struct FfiConverterTypePaymentType: FfiConverterRustBuffer {
    typealias SwiftType = PaymentType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .receive
        
        case 2: return .send
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .receive:
            writeInt(&buf, Int32(1))
        
        
        case .send:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypePaymentType_lift(_ buf: RustBuffer) throws -> PaymentType {
    return try FfiConverterTypePaymentType.lift(buf)
}

public func FfiConverterTypePaymentType_lower(_ value: PaymentType) -> RustBuffer {
    return FfiConverterTypePaymentType.lower(value)
}



extension PaymentType: Equatable, Hashable {}






public protocol EventListener : AnyObject {
    
    func onEvent(e: LiquidSdkEvent) 
    
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceEventListener {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceEventListener = UniffiVTableCallbackInterfaceEventListener(
        onEvent: { (
            uniffiHandle: UInt64,
            e: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceEventListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onEvent(
                     e: try FfiConverterTypeLiquidSdkEvent.lift(e)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceEventListener.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface EventListener: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitEventListener() {
    uniffi_breez_liquid_sdk_bindings_fn_init_callback_vtable_eventlistener(&UniffiCallbackInterfaceEventListener.vtable)
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceEventListener {
    fileprivate static var handleMap = UniffiHandleMap<EventListener>()
}

extension FfiConverterCallbackInterfaceEventListener : FfiConverter {
    typealias SwiftType = EventListener
    typealias FfiType = UInt64

    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}




public protocol Logger : AnyObject {
    
    func log(l: LogEntry) 
    
}



// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceLogger {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceLogger = UniffiVTableCallbackInterfaceLogger(
        log: { (
            uniffiHandle: UInt64,
            l: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceLogger.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.log(
                     l: try FfiConverterTypeLogEntry.lift(l)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceLogger.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface Logger: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitLogger() {
    uniffi_breez_liquid_sdk_bindings_fn_init_callback_vtable_logger(&UniffiCallbackInterfaceLogger.vtable)
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceLogger {
    fileprivate static var handleMap = UniffiHandleMap<Logger>()
}

extension FfiConverterCallbackInterfaceLogger : FfiConverter {
    typealias SwiftType = Logger
    typealias FfiType = UInt64

    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePayment: FfiConverterRustBuffer {
    typealias SwiftType = [Payment]

    public static func write(_ value: [Payment], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePayment.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Payment] {
        let len: Int32 = try readInt(&buf)
        var seq = [Payment]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePayment.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeRouteHint: FfiConverterRustBuffer {
    typealias SwiftType = [RouteHint]

    public static func write(_ value: [RouteHint], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRouteHint.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RouteHint] {
        let len: Int32 = try readInt(&buf)
        var seq = [RouteHint]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRouteHint.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeRouteHintHop: FfiConverterRustBuffer {
    typealias SwiftType = [RouteHintHop]

    public static func write(_ value: [RouteHintHop], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRouteHintHop.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RouteHintHop] {
        let len: Int32 = try readInt(&buf)
        var seq = [RouteHintHop]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRouteHintHop.read(from: &buf))
        }
        return seq
    }
}
public func connect(req: ConnectRequest)throws  -> BindingLiquidSdk {
    return try  FfiConverterTypeBindingLiquidSdk.lift(try rustCallWithError(FfiConverterTypeLiquidSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_func_connect(
        FfiConverterTypeConnectRequest.lower(req),$0
    )
})
}
public func defaultConfig(network: Network) -> Config {
    return try!  FfiConverterTypeConfig.lift(try! rustCall() {
    uniffi_breez_liquid_sdk_bindings_fn_func_default_config(
        FfiConverterTypeNetwork.lower(network),$0
    )
})
}
public func parseInvoice(invoice: String)throws  -> LnInvoice {
    return try  FfiConverterTypeLNInvoice.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_func_parse_invoice(
        FfiConverterString.lower(invoice),$0
    )
})
}
public func setLogger(logger: Logger)throws  {try rustCallWithError(FfiConverterTypeLiquidSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_func_set_logger(
        FfiConverterCallbackInterfaceLogger.lower(logger),$0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_breez_liquid_sdk_bindings_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_func_connect() != 18922) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_func_default_config() != 13178) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_func_parse_invoice() != 13238) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_func_set_logger() != 34021) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_add_event_listener() != 21118) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_backup() != 56517) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_disconnect() != 31676) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_get_info() != 38166) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_list_payments() != 34268) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_prepare_receive_payment() != 57331) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_prepare_send_payment() != 35897) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_receive_payment() != 8257) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_remove_event_listener() != 11780) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_restore() != 42575) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_send_payment() != 37911) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingliquidsdk_sync() != 9045) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_eventlistener_on_event() != 59532) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_logger_log() != 3894) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitEventListener()
    uniffiCallbackInitLogger()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all