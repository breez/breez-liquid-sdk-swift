// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(breez_liquid_sdkFFI)
import breez_liquid_sdkFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_breez_liquid_sdk_bindings_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_breez_liquid_sdk_bindings_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol BindingWalletProtocol : AnyObject {
    
    func backup() throws 
    
    func getInfo(withScan: Bool) throws  -> WalletInfo
    
    func prepareReceivePayment(req: PrepareReceiveRequest) throws  -> PrepareReceiveResponse
    
    func prepareSendPayment(invoice: String) throws  -> PrepareSendResponse
    
    func receivePayment(req: PrepareReceiveResponse) throws  -> ReceivePaymentResponse
    
    func restore(backupPath: String?) throws 
    
    func sendPayment(req: PrepareSendResponse) throws  -> SendPaymentResponse
    
}

open class BindingWallet:
    BindingWalletProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_breez_liquid_sdk_bindings_fn_clone_bindingwallet(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_breez_liquid_sdk_bindings_fn_free_bindingwallet(pointer, $0) }
    }

    

    
open func backup()throws  {try rustCallWithError(FfiConverterTypeLsSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingwallet_backup(self.uniffiClonePointer(),$0
    )
}
}
    
open func getInfo(withScan: Bool)throws  -> WalletInfo {
    return try  FfiConverterTypeWalletInfo.lift(try rustCallWithError(FfiConverterTypeLsSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingwallet_get_info(self.uniffiClonePointer(),
        FfiConverterBool.lower(withScan),$0
    )
})
}
    
open func prepareReceivePayment(req: PrepareReceiveRequest)throws  -> PrepareReceiveResponse {
    return try  FfiConverterTypePrepareReceiveResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingwallet_prepare_receive_payment(self.uniffiClonePointer(),
        FfiConverterTypePrepareReceiveRequest.lower(req),$0
    )
})
}
    
open func prepareSendPayment(invoice: String)throws  -> PrepareSendResponse {
    return try  FfiConverterTypePrepareSendResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingwallet_prepare_send_payment(self.uniffiClonePointer(),
        FfiConverterString.lower(invoice),$0
    )
})
}
    
open func receivePayment(req: PrepareReceiveResponse)throws  -> ReceivePaymentResponse {
    return try  FfiConverterTypeReceivePaymentResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingwallet_receive_payment(self.uniffiClonePointer(),
        FfiConverterTypePrepareReceiveResponse.lower(req),$0
    )
})
}
    
open func restore(backupPath: String?)throws  {try rustCallWithError(FfiConverterTypeLsSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingwallet_restore(self.uniffiClonePointer(),
        FfiConverterOptionString.lower(backupPath),$0
    )
}
}
    
open func sendPayment(req: PrepareSendResponse)throws  -> SendPaymentResponse {
    return try  FfiConverterTypeSendPaymentResponse.lift(try rustCallWithError(FfiConverterTypePaymentError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_method_bindingwallet_send_payment(self.uniffiClonePointer(),
        FfiConverterTypePrepareSendResponse.lower(req),$0
    )
})
}
    

}

public struct FfiConverterTypeBindingWallet: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BindingWallet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BindingWallet {
        return BindingWallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BindingWallet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BindingWallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BindingWallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeBindingWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> BindingWallet {
    return try FfiConverterTypeBindingWallet.lift(pointer)
}

public func FfiConverterTypeBindingWallet_lower(_ value: BindingWallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBindingWallet.lower(value)
}


public struct PrepareReceiveRequest {
    public var payerAmountSat: UInt64?
    public var receiverAmountSat: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(payerAmountSat: UInt64?, receiverAmountSat: UInt64?) {
        self.payerAmountSat = payerAmountSat
        self.receiverAmountSat = receiverAmountSat
    }
}



extension PrepareReceiveRequest: Equatable, Hashable {
    public static func ==(lhs: PrepareReceiveRequest, rhs: PrepareReceiveRequest) -> Bool {
        if lhs.payerAmountSat != rhs.payerAmountSat {
            return false
        }
        if lhs.receiverAmountSat != rhs.receiverAmountSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(payerAmountSat)
        hasher.combine(receiverAmountSat)
    }
}


public struct FfiConverterTypePrepareReceiveRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareReceiveRequest {
        return
            try PrepareReceiveRequest(
                payerAmountSat: FfiConverterOptionUInt64.read(from: &buf), 
                receiverAmountSat: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareReceiveRequest, into buf: inout [UInt8]) {
        FfiConverterOptionUInt64.write(value.payerAmountSat, into: &buf)
        FfiConverterOptionUInt64.write(value.receiverAmountSat, into: &buf)
    }
}


public func FfiConverterTypePrepareReceiveRequest_lift(_ buf: RustBuffer) throws -> PrepareReceiveRequest {
    return try FfiConverterTypePrepareReceiveRequest.lift(buf)
}

public func FfiConverterTypePrepareReceiveRequest_lower(_ value: PrepareReceiveRequest) -> RustBuffer {
    return FfiConverterTypePrepareReceiveRequest.lower(value)
}


public struct PrepareReceiveResponse {
    public var pairHash: String
    public var payerAmountSat: UInt64
    public var feesSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(pairHash: String, payerAmountSat: UInt64, feesSat: UInt64) {
        self.pairHash = pairHash
        self.payerAmountSat = payerAmountSat
        self.feesSat = feesSat
    }
}



extension PrepareReceiveResponse: Equatable, Hashable {
    public static func ==(lhs: PrepareReceiveResponse, rhs: PrepareReceiveResponse) -> Bool {
        if lhs.pairHash != rhs.pairHash {
            return false
        }
        if lhs.payerAmountSat != rhs.payerAmountSat {
            return false
        }
        if lhs.feesSat != rhs.feesSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(pairHash)
        hasher.combine(payerAmountSat)
        hasher.combine(feesSat)
    }
}


public struct FfiConverterTypePrepareReceiveResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareReceiveResponse {
        return
            try PrepareReceiveResponse(
                pairHash: FfiConverterString.read(from: &buf), 
                payerAmountSat: FfiConverterUInt64.read(from: &buf), 
                feesSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareReceiveResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.pairHash, into: &buf)
        FfiConverterUInt64.write(value.payerAmountSat, into: &buf)
        FfiConverterUInt64.write(value.feesSat, into: &buf)
    }
}


public func FfiConverterTypePrepareReceiveResponse_lift(_ buf: RustBuffer) throws -> PrepareReceiveResponse {
    return try FfiConverterTypePrepareReceiveResponse.lift(buf)
}

public func FfiConverterTypePrepareReceiveResponse_lower(_ value: PrepareReceiveResponse) -> RustBuffer {
    return FfiConverterTypePrepareReceiveResponse.lower(value)
}


public struct PrepareSendResponse {
    public var id: String
    public var payerAmountSat: UInt64
    public var receiverAmountSat: UInt64
    public var totalFees: UInt64
    public var fundingAddress: String
    public var invoice: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, payerAmountSat: UInt64, receiverAmountSat: UInt64, totalFees: UInt64, fundingAddress: String, invoice: String) {
        self.id = id
        self.payerAmountSat = payerAmountSat
        self.receiverAmountSat = receiverAmountSat
        self.totalFees = totalFees
        self.fundingAddress = fundingAddress
        self.invoice = invoice
    }
}



extension PrepareSendResponse: Equatable, Hashable {
    public static func ==(lhs: PrepareSendResponse, rhs: PrepareSendResponse) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.payerAmountSat != rhs.payerAmountSat {
            return false
        }
        if lhs.receiverAmountSat != rhs.receiverAmountSat {
            return false
        }
        if lhs.totalFees != rhs.totalFees {
            return false
        }
        if lhs.fundingAddress != rhs.fundingAddress {
            return false
        }
        if lhs.invoice != rhs.invoice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(payerAmountSat)
        hasher.combine(receiverAmountSat)
        hasher.combine(totalFees)
        hasher.combine(fundingAddress)
        hasher.combine(invoice)
    }
}


public struct FfiConverterTypePrepareSendResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareSendResponse {
        return
            try PrepareSendResponse(
                id: FfiConverterString.read(from: &buf), 
                payerAmountSat: FfiConverterUInt64.read(from: &buf), 
                receiverAmountSat: FfiConverterUInt64.read(from: &buf), 
                totalFees: FfiConverterUInt64.read(from: &buf), 
                fundingAddress: FfiConverterString.read(from: &buf), 
                invoice: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PrepareSendResponse, into buf: inout [UInt8]) {
        FfiConaverterString.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.payerAmountSat, into: &buf)
        FfiConverterUInt64.write(value.receiverAmountSat, into: &buf)
        FfiConverterUInt64.write(value.totalFees, into: &buf)
        FfiConverterString.write(value.fundingAddress, into: &buf)
        FfiConverterString.write(value.invoice, into: &buf)
    }
}


public func FfiConverterTypePrepareSendResponse_lift(_ buf: RustBuffer) throws -> PrepareSendResponse {
    return try FfiConverterTypePrepareSendResponse.lift(buf)
}

public func FfiConverterTypePrepareSendResponse_lower(_ value: PrepareSendResponse) -> RustBuffer {
    return FfiConverterTypePrepareSendResponse.lower(value)
}


public struct ReceivePaymentResponse {
    public var id: String
    public var invoice: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, invoice: String) {
        self.id = id
        self.invoice = invoice
    }
}



extension ReceivePaymentResponse: Equatable, Hashable {
    public static func ==(lhs: ReceivePaymentResponse, rhs: ReceivePaymentResponse) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.invoice != rhs.invoice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(invoice)
    }
}


public struct FfiConverterTypeReceivePaymentResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReceivePaymentResponse {
        return
            try ReceivePaymentResponse(
                id: FfiConverterString.read(from: &buf), 
                invoice: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ReceivePaymentResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.invoice, into: &buf)
    }
}


public func FfiConverterTypeReceivePaymentResponse_lift(_ buf: RustBuffer) throws -> ReceivePaymentResponse {
    return try FfiConverterTypeReceivePaymentResponse.lift(buf)
}

public func FfiConverterTypeReceivePaymentResponse_lower(_ value: ReceivePaymentResponse) -> RustBuffer {
    return FfiConverterTypeReceivePaymentResponse.lower(value)
}


public struct SendPaymentResponse {
    public var txid: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(txid: String) {
        self.txid = txid
    }
}



extension SendPaymentResponse: Equatable, Hashable {
    public static func ==(lhs: SendPaymentResponse, rhs: SendPaymentResponse) -> Bool {
        if lhs.txid != rhs.txid {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(txid)
    }
}


public struct FfiConverterTypeSendPaymentResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendPaymentResponse {
        return
            try SendPaymentResponse(
                txid: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: SendPaymentResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.txid, into: &buf)
    }
}


public func FfiConverterTypeSendPaymentResponse_lift(_ buf: RustBuffer) throws -> SendPaymentResponse {
    return try FfiConverterTypeSendPaymentResponse.lift(buf)
}

public func FfiConverterTypeSendPaymentResponse_lower(_ value: SendPaymentResponse) -> RustBuffer {
    return FfiConverterTypeSendPaymentResponse.lower(value)
}


public struct WalletInfo {
    public var balanceSat: UInt64
    public var pubkey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(balanceSat: UInt64, pubkey: String) {
        self.balanceSat = balanceSat
        self.pubkey = pubkey
    }
}



extension WalletInfo: Equatable, Hashable {
    public static func ==(lhs: WalletInfo, rhs: WalletInfo) -> Bool {
        if lhs.balanceSat != rhs.balanceSat {
            return false
        }
        if lhs.pubkey != rhs.pubkey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(balanceSat)
        hasher.combine(pubkey)
    }
}


public struct FfiConverterTypeWalletInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletInfo {
        return
            try WalletInfo(
                balanceSat: FfiConverterUInt64.read(from: &buf), 
                pubkey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: WalletInfo, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.balanceSat, into: &buf)
        FfiConverterString.write(value.pubkey, into: &buf)
    }
}


public func FfiConverterTypeWalletInfo_lift(_ buf: RustBuffer) throws -> WalletInfo {
    return try FfiConverterTypeWalletInfo.lift(buf)
}

public func FfiConverterTypeWalletInfo_lower(_ value: WalletInfo) -> RustBuffer {
    return FfiConverterTypeWalletInfo.lower(value)
}


public enum LsSdkError {

    
    
    case Generic(message: String)
    
}


public struct FfiConverterTypeLsSdkError: FfiConverterRustBuffer {
    typealias SwiftType = LsSdkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LsSdkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LsSdkError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


extension LsSdkError: Equatable, Hashable {}

extension LsSdkError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Network {
    
    case liquid
    case liquidTestnet
}


public struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .liquid
        
        case 2: return .liquidTestnet
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        switch value {
        
        
        case .liquid:
            writeInt(&buf, Int32(1))
        
        
        case .liquidTestnet:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeNetwork_lift(_ buf: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(buf)
}

public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}



extension Network: Equatable, Hashable {}




public enum PaymentError {

    
    
    case AmountOutOfRange(message: String)
    
    case AlreadyClaimed(message: String)
    
    case Generic(message: String)
    
    case InvalidInvoice(message: String)
    
    case InvalidPreimage(message: String)
    
    case LwkError(message: String)
    
    case PairsNotFound(message: String)
    
    case PersistError(message: String)
    
    case SendError(message: String)
    
    case SignerError(message: String)
    
}


public struct FfiConverterTypePaymentError: FfiConverterRustBuffer {
    typealias SwiftType = PaymentError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .AmountOutOfRange(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .AlreadyClaimed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .InvalidInvoice(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .InvalidPreimage(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .LwkError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .PairsNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .PersistError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .SendError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .SignerError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .AmountOutOfRange(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .AlreadyClaimed(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .InvalidInvoice(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .InvalidPreimage(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .LwkError(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .PairsNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .PersistError(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .SendError(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .SignerError(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))

        
        }
    }
}


extension PaymentError: Equatable, Hashable {}

extension PaymentError: Error { }

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}
public func connect(mnemonic: String, dataDir: String?, network: Network)throws  -> BindingWallet {
    return try  FfiConverterTypeBindingWallet.lift(try rustCallWithError(FfiConverterTypeLsSdkError.lift) {
    uniffi_breez_liquid_sdk_bindings_fn_func_connect(
        FfiConverterString.lower(mnemonic),
        FfiConverterOptionString.lower(dataDir),
        FfiConverterTypeNetwork.lower(network),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_breez_liquid_sdk_bindings_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_func_connect() != 44272) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingwallet_backup() != 28859) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingwallet_get_info() != 28939) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingwallet_prepare_receive_payment() != 20791) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingwallet_prepare_send_payment() != 20823) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingwallet_receive_payment() != 13515) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingwallet_restore() != 8895) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_breez_liquid_sdk_bindings_checksum_method_bindingwallet_send_payment() != 11144) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all